(load "compiler.scm")

;; native unary primitives
(define-primitive (fxadd1 si expr)
    (emit-expr si expr)
    (emit "addl $~s, %eax" (emit-immediate 1))
)

(define-primitive (fxsub1 si expr)
    (emit-expr si expr)
    (emit "subl $~s, %eax" (emit-immediate 1))
)

(define-primitive (char->fixnum si expr) 
    (emit-expr si expr)
    (emit "shrl $6,  %eax")
    (emit "orl  $~s, %eax" int_tag)
)

(define-primitive (fixnum->char si expr) 
    (emit-expr si expr)
    (emit "shll $6,  %eax")
    (emit "orl  $~s, %eax" char_tag)
)

(define-primitive (fixnum? si expr) 
    (emit-expr si expr)
    (emit "andl   $~s,  %eax" (mask int_tag_width))
    (emit "cmpl   $~s,  %eax" int_tag)
    (emit "sete   %al")
    (emit "shll   $~s,  %eax" bool_tag_width)
    (emit "orl    $~s,  %eax" bool_tag)
)

(define-primitive (boolean? si expr) 
    (emit-expr si expr)
    (emit "andl   $~s,  %eax" (mask bool_tag_width))
    (emit "cmpl   $~s,  %eax" bool_tag)
    (emit "sete   %al")
    (emit "shll   $~s,  %eax" bool_tag_width)
    (emit "orl    $~s,  %eax" bool_tag)
)

(define-primitive (char? si expr) 
    (emit-expr si expr)
    (emit "andl   $~s,  %eax" (mask char_tag_width))
    (emit "cmpl   $~s,  %eax" char_tag)
    (emit "sete   %al")
    (emit "shll   $~s,  %eax" bool_tag_width)
    (emit "orl    $~s,  %eax" bool_tag)
)

(define-primitive (fxzero? si expr)
    (emit-expr si expr)
    (emit "cmpl   $0,   %eax")
    (emit "sete   %dl")
    (emit "xorl   %eax, %eax")
    (emit "mov    %dl,  %al")
    (emit "shll   $~s,  %eax" bool_tag_width)
    (emit "orl    $~s,  %eax" bool_tag)
)

(define-primitive (not si expr)
    (emit-expr si expr)
    (emit "cmpl   $47,   %eax") ;;#b101111
    (emit "sete   %dl")
    (emit "xorl   %eax, %eax")
    (emit "mov    %dl,  %al")
    (emit "shll   $~s,  %eax" bool_tag_width)
    (emit "orl    $~s,  %eax" bool_tag)
)

(define-primitive (null? si expr)
    (emit-expr si expr)
    (emit "cmpl   $63,   %eax") ;;#b00111111
    (emit "sete   %dl")
    (emit "xorl   %eax, %eax")
    (emit "mov    %dl,  %al")
    (emit "shll   $~s,  %eax" bool_tag_width)
    (emit "orl    $~s,  %eax" bool_tag)
)

(define-primitive (fxlognot si expr)
    (emit-expr si expr)
    (emit "sarl  $~s,  %eax" int_tag_width)
    (emit "notl  %eax")
    (emit "shll  $~s,  %eax" int_tag_width)
    (emit "orl   $~s,  %eax" int_tag)
)


;; native 
(define-primitive (fx+ si expr1 expr2) 
    (emit-expr si expr1)
    (emit "sarl $~s,      %eax" int_tag_width)
    (emit "movl %eax,     ~s(%rsp)" si)
    (emit-expr (- si wordsize) expr2)
    (emit "sarl $~s,      %eax" int_tag_width)
    (emit "addl ~s(%rsp), %eax" si)
    (emit "shll $~s,      %eax" int_tag_width)
    (emit "orl  $~s,      %eax" int_tag)
)

(define-primitive (fx- si expr1 expr2) 
    (emit-expr si expr2)
    (emit "sarl $~s,      %eax" int_tag_width)
    (emit "movl %eax,     ~s(%rsp)" si)
    (emit-expr (- si wordsize) expr1)
    (emit "sarl $~s,      %eax" int_tag_width)
    (emit "subl ~s(%rsp), %eax" si)
    (emit "shll $~s,      %eax" int_tag_width)
    (emit "orl  $~s,      %eax" int_tag)
)

(define-primitive (fx* si expr1 expr2)
    (emit-expr si expr1)
    (emit "sarl  $~s,      %eax" int_tag_width)
    (emit "movl  %eax,     ~s(%rsp)" si)
    (emit-expr (- si wordsize) expr2)
    (emit "sarl  $~s,      %eax" int_tag_width)
    (emit "imull ~s(%rsp), %eax" si)
    (emit "shll  $~s,      %eax" int_tag_width)
    (emit "orl   $~s,      %eax" int_tag)
)

(define-primitive (fxlogand si expr1 expr2)
    (emit-expr si expr1)
    (emit "sarl  $~s,      %eax" int_tag_width)
    (emit "movl  %eax,     ~s(%rsp)" si)
    (emit-expr (- si wordsize) expr2)
    (emit "sarl  $~s,      %eax" int_tag_width)
    (emit "andl  ~s(%rsp), %eax" si)
    (emit "shll  $~s,      %eax" int_tag_width)
    (emit "orl   $~s,      %eax" int_tag)
)

(define-primitive (fxlogor si expr1 expr2)
    (emit-expr si expr1)
    (emit "sarl  $~s,      %eax" int_tag_width)
    (emit "movl  %eax,     ~s(%rsp)" si)
    (emit-expr (- si wordsize) expr2)
    (emit "sarl  $~s,      %eax" int_tag_width)
    (emit "orl   ~s(%rsp), %eax" si)
    (emit "shll  $~s,      %eax" int_tag_width)
    (emit "orl   $~s,      %eax" int_tag)
)

(define-primitive (fx= si expr1 expr2)
    (let ([ne-label (unique-label)])
        (emit-expr si expr1)
        (emit "sarl  $~s,      %eax" int_tag_width)
        (emit "movl  %eax,     ~s(%rsp)" si)
        (emit-expr (- si wordsize) expr2)
        (emit "sarl  $~s,      %eax" int_tag_width)
        (emit "cmpl  ~s(%rsp), %eax" si)
        (emit "movl  $0,       %eax")
        (emit "jne   ~a" ne-label)
        (emit "movl  $1,       %eax")
        (emit "~a:" ne-label)
        (emit "shll  $~s,      %eax" bool_tag_width)
        (emit "orl   $~s,      %eax" bool_tag)
    )
)

(define-primitive (fx< si expr1 expr2)
    (let ([ge-label (unique-label)])
        (emit-expr si expr1)
        (emit "sarl  $~s,      %eax" int_tag_width)
        (emit "movl  %eax,     ~s(%rsp)" si)
        (emit-expr (- si wordsize) expr2)
        (emit "sarl  $~s,      %eax" int_tag_width)
        (emit "cmpl  %eax,     ~s(%rsp)" si)
        (emit "movl  $0,       %eax")
        (emit "jge   ~a" ge-label)
        (emit "movl  $1,       %eax")
        (emit "~a:" ge-label)

        (emit "shll  $~s,      %eax" bool_tag_width)
        (emit "orl   $~s,      %eax" bool_tag)
    )
)

(define-primitive (fx<= si expr1 expr2)
    (let ([g-label (unique-label)])
        (emit-expr si expr1)
        (emit "sarl  $~s,      %eax" int_tag_width)
        (emit "movl  %eax,     ~s(%rsp)" si)
        (emit-expr (- si wordsize) expr2)
        (emit "sarl  $~s,      %eax" int_tag_width)
        (emit "cmpl  %eax,     ~s(%rsp)" si)
        (emit "movl  $0,       %eax")
        (emit "jg    ~a" g-label)
        (emit "movl  $1,       %eax")
        (emit "~a:" g-label)

        (emit "shll  $~s,      %eax" bool_tag_width)
        (emit "orl   $~s,      %eax" bool_tag)
    )
)

(define-primitive (fx> si expr1 expr2)
    (let ([le-label (unique-label)])
        (emit-expr si expr1)
        (emit "sarl  $~s,      %eax" int_tag_width)
        (emit "movl  %eax,     ~s(%rsp)" si)
        (emit-expr (- si wordsize) expr2)
        (emit "sarl  $~s,      %eax" int_tag_width)
        (emit "cmpl  %eax,     ~s(%rsp)" si)
        (emit "movl  $0,       %eax")
        (emit "jle   ~a" le-label)
        (emit "movl  $1,       %eax")
        (emit "~a:" le-label)

        (emit "shll  $~s,      %eax" bool_tag_width)
        (emit "orl   $~s,      %eax" bool_tag)
    )
)

(define-primitive (fx>= si expr1 expr2)
    (let ([l-label (unique-label)])
        (emit-expr si expr1)
        (emit "sarl  $~s,      %eax" int_tag_width)
        (emit "movl  %eax,     ~s(%rsp)" si)
        (emit-expr (- si wordsize) expr2)
        (emit "sarl  $~s,      %eax" int_tag_width)
        (emit "cmpl  %eax,     ~s(%rsp)" si)
        (emit "movl  $0,       %eax")
        (emit "jl    ~a" l-label)
        (emit "movl  $1,       %eax")
        (emit "~a:" l-label)

        (emit "shll  $~s,      %eax" bool_tag_width)
        (emit "orl   $~s,      %eax" bool_tag)
    )
)
